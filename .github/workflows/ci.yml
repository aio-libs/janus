name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build

env:
  COLOR: >-  # Supposedly, pytest or coveragepy use this
    yes
  FORCE_COLOR: 1  # Request colored output from CLI tools supporting it
  MYPY_FORCE_COLOR: 1  # MyPy's color enforcement
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  PRE_COMMIT_COLOR: always
  PROJECT_NAME: janus
  PY_COLORS: 1  # Recognized by the `py` package, dependency of `pytest`
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1

jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v5
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.13
    - name: Cache PyPI
      uses: actions/cache@v4
      with:
        key: pip-lint-${{ hashFiles('requirements-dev.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Run linters
      run: |
        make lint

  unit:
    name: Unit
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu]
      fail-fast:
        false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v5
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT    # - name: Cache
      shell: bash
    - name: Cache PyPI
      uses: actions/cache@v4
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.python-version }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        pytest --cov=janus --cov=tests --cov-report=term --cov-report=xml:coverage.xml
    - name: Upload coverage artifact
      uses: aio-libs/prepare-coverage@v24.9.2

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v5
    - name: Setup Python 3.13
      uses: actions/setup-python@v6
      with:
        python-version: 3.13
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT    # - name: Cache
      shell: bash
    - name: Cache PyPI
      uses: actions/cache@v4
      with:
        key: pip-ci-ubuntu-3.13-${{ hashFiles('requirements-dev.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-ubuntu-3.13-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Run benchmarks
      uses: CodSpeedHQ/action@v3
      with:
        token: ${{ secrets.CODSPEED_TOKEN }}
        run: python -Im pytest --no-cov -vvvvv --codspeed


  check:  # The branch protection check
    if: always()
    needs: [lint, unit, benchmark]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - name: Checkout
      uses: actions/checkout@v5
    - name: Upload coverage
      uses: aio-libs/upload-coverage@v24.10.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy
    needs: check
    runs-on: ubuntu-latest
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore
    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PROJECT_NAME }}
    steps:
    - name: Checkout
      uses: actions/checkout@v5
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: 3.13
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Install builder
      run: |
        python -m pip install wheel build
    - name: Make dists
      run: |
        python -m build

    - name: Login
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        version_file: ${{ env.PROJECT_NAME }}/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        head_line: >-
          {version} \({date}\)\n
        # fix_issue_regex: >-
        #   :issue:`(\d+)`
        # fix_issue_repl: >-
        #   #\1

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v2
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**
