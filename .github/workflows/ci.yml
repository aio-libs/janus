name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-lint-${{ hashFiles('requirements-dev.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Run linters
      run: |
        make lint

  unit:
    name: Unit
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu]
      fail-fast:
        false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT    # - name: Cache
      shell: bash
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.python-version }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        pytest --cov=janus --cov=tests --cov-report=term --cov-report=xml:coverage.xml
    - name: Upload coverage artifact
      uses: aio-libs/prepare-coverage@v24.9.2
      with:
        key: unit-${{ matrix.python-version }}

  check:  # The branch protection check
    if: always()
    needs: [lint, unit]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - name: Checkout
      uses: actions/checkout@v4
    - name: Upload coverage
      uses: aio-libs/upload-coverage@v24.10.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy
    needs: check
    runs-on: ubuntu-latest
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4.1.0
      with:
        path: requirements-dev.txt
    - name: Install twine
      run: |
        python -m pip install twine wheel build
    - name: Make dists
      run: |
        python -m build
    - name: PyPI upload
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
